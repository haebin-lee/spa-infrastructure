name: Build and Deploy

on:
  push:
    branches: [main, master]
  workflow_dispatch: # Allow manual triggering

jobs:
  build-and-deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infrastructure repository
        uses: actions/checkout@v3

      - name: Checkout source code repository
        uses: actions/checkout@v3
        with:
          repository: haebin-lee/spa-source
          path: spa-source
          token: ${{ secrets.GH_PAT }}

      # - name: Debug AWS credentials
      #   env:
      #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      #     AWS_DEFAULT_REGION: ${{ secrets.AWS_REGION }}
      #   run: |
      #     echo "Testing AWS credentials with session token..."
      #     aws sts get-caller-identity

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      # - name: Build, tag, and push frontend image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      #     IMAGE_TAG: frontend
      #   run: |
      #     cd spa-source
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./frontend
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      # - name: Build, tag, and push backend image to Amazon ECR
      #   env:
      #     ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
      #     ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
      #     IMAGE_TAG: backend
      #   run: |
      #     cd spa-source
      #     docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
      #     docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Copy deployment files to EC2
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "scripts/deploy.sh,scripts/docker-compose.yml"
          target: "~/"
          strip_components: 1

      - name: Deploy to EC2
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          envs: ECR_REGISTRY,ECR_REPOSITORY,AWS_REGION,DB_HOST,DB_USER,DB_PASSWORD,DB_NAME,DB_PORT
          script: |
            # Set environment variables for deployment
            export ECR_REPO=$ECR_REGISTRY/$ECR_REPOSITORY
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_USER=${{ secrets.DB_USER }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_NAME=${{ secrets.DB_NAME }}
            export DB_PORT=${{ secrets.DB_PORT }}

            # Run deployment script
            cd ~
            # Copy deploy.sh from repository or create it on the EC2 instance
            chmod +x deploy.sh
            ./deploy.sh
