name: QA Deployment

on:
  workflow_dispatch: # Allow manual triggering

jobs:
  build-and-deploy:
    permissions:
      id-token: write
      contents: read
    runs-on: ubuntu-latest
    steps:
      - name: Checkout infrastructure repository
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-session-token: ${{ secrets.AWS_SESSION_TOKEN }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Copy deployment files to EC2
        if: success()
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "scripts/deploy.sh,scripts/docker-compose.yml"
          target: "~/"
          strip_components: 1

      - name: Deploy to EC2
        if: success()
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script_stop: true
          envs: ECR_REPO,AWS_REGION,DB_HOST,DB_USER,DB_PASSWORD,DB_NAME,DB_PORT
          script: |
            export ECR_REPO=${{ secrets.ECR_REPO }}
            export AWS_ACCESS_KEY_ID=${{ secrets.AWS_ACCESS_KEY_ID }}
            export AWS_SECRET_ACCESS_KEY=${{ secrets.AWS_SECRET_ACCESS_KEY }}
            export AWS_SESSION_TOKEN=${{ secrets.AWS_SESSION_TOKEN }}
            export AWS_REGION=${{ secrets.AWS_REGION }}
            export DB_HOST=${{ secrets.DB_HOST }}
            export DB_USER=${{ secrets.DB_USER }}
            export DB_PASSWORD=${{ secrets.DB_PASSWORD }}
            export DB_NAME=${{ secrets.DB_NAME }}
            export DB_PORT=${{ secrets.DB_PORT }}

            cd ~
            chmod +x deploy.sh
            ./deploy.sh

      - name: Clean up temporary EC2
        if: always()
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          SG_ID: ${{ steps.launch-ec2.outputs.sg_id }}
          DB_SG_ID: ${{ secrets.DB_SG_ID }}
          INSTANCE_ID: ${{ steps.launch-ec2.outputs.instance_id }}
        run: |
          cd scripts
          chmod +x ec2-deletion.sh
          ./ec2-deletion.sh
